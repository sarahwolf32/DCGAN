{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Previous attempt:
\b0 \
\
Followed awjuliani\'92s architecture: https://gist.github.com/awjuliani/8ebf356d03ffee139659807be7fa2611#file-dcgan-ipynb\
\
Used all classes from MNIST.\
\
Found that the discriminator loss was going to zero quickly, even when I trained the generator twice as much, like he did.\
\
The discriminator loss quickly going to zero is the most common failure mode for GANs, and is almost never recoverable.\
\

\b This attempt:
\b0 \
\
Based on some forum advice, I then put in a minimum threshold for the discriminator loss, to \'93forcibly\'94 prevent it from going to zero. Chose 0.5 as the threshold, somewhat arbirarily. Trained for 33 epochs. The results converged on one image, with some white pixels, that did not look quite like any of the digits.\
\
Converging onto one output is another common failure mode for GANs.\
\
Also, the loss curve was very erratic, did not look nice and smooth like the one from the source below. Like it did all its learning in random bursts, and then went back to the threshold and stayed there a long time. \
\

\b Possible next steps:\

\b0 \'97 could try other threshold values\
\'97 could simplify the problem by only using one digit type\
\'97 could try a slightly different architecture \
	Better demonstration of results here:\
	https://github.com/znxlwm/tensorflow-MNIST-GAN-DCGAN\
\

\b Learnings:\

\b0 \'97It would be useful to be able to train several models at once. I would have liked to try several loss thresholds at once, for example, since I did not know what value to use. Just doing this one took all night and half the day on my laptop before I had enough information to give up on it. This suggests that learning how to run models in the cloud should be a priority.\
}